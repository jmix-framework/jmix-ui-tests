plugins {
    id 'io.jmix' version '0.9.2'
    id 'java'
    id 'groovy'
}

apply plugin: 'org.springframework.boot'

jmix {
    bomVersion = '1.0.0-SNAPSHOT'
}

group = 'io.jmix.tests'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven {
        url 'https://nexus.jmix.io/repository/public'
    }
}

dependencies {
    implementation 'io.jmix.core:jmix-core-starter'
    implementation 'io.jmix.data:jmix-eclipselink-starter'
    implementation 'io.jmix.ui:jmix-ui-starter'
    implementation 'io.jmix.ui:jmix-ui-data-starter'
    implementation 'io.jmix.ui:jmix-ui-themes-compiled'
    implementation 'io.jmix.ui:jmix-ui-widgets-compiled'
    implementation 'io.jmix.security:jmix-security-starter'
    implementation 'io.jmix.security:jmix-security-ui-starter'
    implementation 'io.jmix.security:jmix-security-data-starter'
    implementation 'io.jmix.dynattr:jmix-dynattr-starter'
    implementation 'io.jmix.dynattr:jmix-dynattr-ui-starter'
    implementation "io.jmix.datatools:jmix-datatools-starter"
    implementation "io.jmix.datatools:jmix-datatools-ui-starter"

    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation('org.jsoup:jsoup') {
        version {
            strictly '1.11.2'
        }
    }

    runtimeOnly 'org.hsqldb:hsqldb'

    testImplementation "io.jmix.masquerade:jmix-masquerade:${jmix.bomVersion}"

    testImplementation 'com.codeborne:selenide:5.20.1'
    testImplementation 'org.codehaus.groovy:groovy:3.0.7'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'

    testImplementation 'org.testcontainers:selenium:1.15.2'
    testImplementation 'org.testcontainers:junit-jupiter:1.15.2'
    testImplementation 'org.testcontainers:postgresql:1.15.2'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
    testRuntimeOnly 'org.postgresql:postgresql:42.2.19'

}

task testUi(type: Test) {
    useJUnitPlatform()

    filter {
        includeTestsMatching "io.jmix.tests.ui.*"
    }

    if (rootProject.hasProperty('jmix.tests.ui.baseHost')) {
        systemProperty 'jmix.tests.ui.baseHost', rootProject['jmix.tests.ui.baseHost']
    } else {
        systemProperty 'jmix.tests.ui.baseHost', 'http://host.docker.internal'
    }

    if (rootProject.hasProperty('selenide.browser')) {
        systemProperty 'selenide.browser', rootProject['selenide.browser']
    }

    if (rootProject.hasProperty('webdriver.chrome.driver')) {
        systemProperty 'webdriver.chrome.driver', rootProject['webdriver.chrome.driver']
    }

    if (rootProject.hasProperty('webdriver.gecko.driver')) {
        systemProperty 'webdriver.gecko.driver', rootProject['webdriver.gecko.driver']
    }

    def envProperties = rootProject.getProperties()
    for (def entry in envProperties.entrySet()) {
        if (String.valueOf(entry.key).startsWith('selenide.')) {
            systemProperty(String.valueOf(entry.key), entry.value)
        }
    }
}

task testSampler(type: Test) {
    useJUnitPlatform()

    filter {
        includeTestsMatching "io.jmix.tests.sampler.*"
    }

    if (rootProject.hasProperty('jmix.tests.sampler.baseUrl')) {
        systemProperty 'selenide.baseUrl', rootProject['jmix.tests.sampler.baseUrl']
    } else {
        systemProperty 'selenide.baseUrl', 'http://host.docker.internal:8080/sampler'
    }

    if (rootProject.hasProperty('selenide.browser')) {
        systemProperty 'selenide.browser', rootProject['selenide.browser']
    }

    if (rootProject.hasProperty('webdriver.chrome.driver')) {
        systemProperty 'webdriver.chrome.driver', rootProject['webdriver.chrome.driver']
    }

    if (rootProject.hasProperty('webdriver.gecko.driver')) {
        systemProperty 'webdriver.gecko.driver', rootProject['webdriver.gecko.driver']
    }

    def envProperties = rootProject.getProperties()
    for (def entry in envProperties.entrySet()) {
        if (String.valueOf(entry.key).startsWith('selenide.')) {
            systemProperty(String.valueOf(entry.key), entry.value)
        }
    }
}

test.dependsOn testUi, testSampler
